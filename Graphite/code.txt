# Example for creating graph:
# o -> o -> o -> o -> o -> o
# |    |    |    |    |    |
# v    v    v    v    v    v
# o -> o -> o -> o -> o -> o
# |    |    |    |    |    |
# v    v    v    v    v    v
# o -> o -> o -> o -> o -> o

#DGraph g = new DGraph();

#int x = 3;
#int y = 3;

#int currentX = 1;
#int currentY = 1;

#g {
#    while (currentX <= x) {
#        while (currentY <= y) {
#            V + {"X" + currentX, "Y" + currentY};
#            ["X" + currentX and "Y" + currentY] => ["X" + currentX and "Y" + (currentY - 1)];
#            ["X" + currentX and "Y" + currentY] => ["X" + (currentX - 1) and "Y" + currentY];
#            currentY = currentY + 1;
#        }
#        currentY = 1;
#        currentX = currentX + 1;
#    }
#};
#
#g.PrintGraphInfo();

# Example for creating graph:
#             o
#            / \
#          /     \
#         v       v
#         o       o
#        / \     / \
#       v   v   v   v
#       o   o   o   o

DGraph g = new DGraph();

int depth = 3;

testFunction(DGraph g, str rootTag, int currentDepth) returns void 
{
    if (currentDepth > depth)
    {
        return;
    }
    str leaf1tag = "Leaf" + currentDepth + "1";
    str leaf2tag = "Leaf" + currentDepth + "2";
    g {
        rootTag << "Root";
        V + {leaf1tag};
        V + {leaf2tag};
        ["Root"] => [leaf1tag or leaf2tag];
        "Root" << null;
        currentDepth = currentDepth + 1;    
        testFunction(g, leaf1tag, currentDepth);
        leaf1tag << null;
        testFunction(g, leaf2tag, currentDepth);
        leaf2tag << null;
    };
}

g{
    V + {"Root"};
};
testFunction(g, "Root", 1);

g.PrintGraphInfo();