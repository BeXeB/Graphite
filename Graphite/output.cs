// using Domain; class Program { static void Main(string[] args) {int z = 1;int test(int a) {int z = 2; return testtest() + a + z; int testtest() {int z = 3; return z;}}int test2(Func<int, int> f,int a) {return f(a);}Func<Func<int, int>,int, int> test3() {return test2;}int a = test3()(test, 1);Func<int, int> thisIsAFunction = (int a) => {return a;};Func<Func<int, int>, HashSet<int>> thisIsAFunction2 = (Func<int, int> f) => {return [f(1)];};int ce = -123;bool boo = !true;Func<Func<int, int>> test5 = () => {return thisIsAFunction;};Func<int, int> f = thisIsAFunction;HashSet<Func<int, int>> set2 = [f, thisIsAFunction, test, test5()];HashSet<int> set = thisIsAFunction2(f);TestClass obj = new TestClass();obj.test1(1);obj.test2()(1);TestClass2 obj2 = new TestClass2();obj2.a.test2()(1);List<int> x = obj2.b.test3();TestClass3 obj4 = obj2.test3();obj4.x = test3()(test, 1);TestClass3 obj3 = new TestClass3();obj3.test3();obj3.test1();obj3 = new TestClass3();List<int> list = [1, 2, 3, 4, 5];HashSet<Func<Func<Func<int, int>,int, int>>> test4() {return [test3, test3];}int d = 4;int aaa = 2;int JustReturn(int a) {return a;}DGraph G = new DGraph();G.Connect(v => (v.Contains("tag1") && v.Contains("tag2")) || v.Contains("tag3"), v => v.Contains("tag4"), d);G.Connect(v => (v.Contains("tag1") && !v.Contains("tag2")) || v.Contains("tag3"), v => v.Contains("tag4"), 2.2);G.Connect(v => v.Contains("tag4"), v => (v.Contains("tag1") && !v.Contains("tag2")) || v.Contains("tag3"), 2.2);G.Connect(v => !(v.Contains("tag1") && v.Contains("tag2")) || v.Contains("tag3"), v => v.Contains("tag4"), 1);G.Connect(v => v.Contains("tag4"), v => !(v.Contains("tag1") && v.Contains("tag2")) || v.Contains("tag3"), 1);G.Disconnect(v => (v.Contains("tag1") && v.Contains("tag2")) || v.Contains("tag3"), v => v.Contains("tag4"));G.RemoveVertex(v => v.Contains("tag1"));G.AddVertex(["tag1", "tag2"], 12);G.AddTags(v => v.Contains("tag3"), ["tag4"]);G.RemoveTags(v => v.Contains("tag4"), ["tag3"]);G.Retag("tag1", null);G.Retag("tag2", "tag1");aaa = 1;while (aaa < 10){G.AddVertex(["tag1", "tag2"], 1);aaa = aaa + JustReturn(1);}if (aaa == 10){G.AddVertex(["tag1", "tag2"], 1);}else{G.RemoveVertex(v => v.Contains("tag1"));}G.PrintGraphInfo();} public class TestClass  { public int x; public int test1(int x) {return this.x;}public Func<int, int> test2() {return test1;} }public class TestClass2  { public TestClass a = new TestClass();public TestClass3 b = new TestClass3(); public TestClass3 test3() {return b;} }public class TestClass3  : TestClass {  public List<int> test1() {return [base.test1(1)];}public List<int> test3() {return test1();}public int test4() {return base.x;} } }